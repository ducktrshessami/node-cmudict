"use strict";var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var src_exports={};__export(src_exports,{ArticulationManner:()=>ArticulationManner,Dict:()=>Dict,Entry:()=>Entry,Phoneme:()=>Phoneme,Phones:()=>Phones,Pronunciation:()=>Pronunciation,Symbols:()=>Symbols,VP:()=>VP});module.exports=__toCommonJS(src_exports);var Entry=class{constructor(name,tags=[]){this.name=name;this.pronunciations=[],this.tags=new Set(tags)}addPronunciation(pronunciation,note){let newItem=new Pronunciation(this,pronunciation,note);return this.pronunciations.push(newItem),newItem}toString(){return this.tags&&this.pronunciations.length?[this.pronunciations[0].toString()+` # ${[...this.tags.values()].join(", ")}`,...this.pronunciations.slice(1)].join(`
`):this.pronunciations.join(`
`)}toJSON(){return{name:this.name,pronunciations:this.pronunciations.map(pronunciation=>pronunciation.toJSON()),tags:[...this.tags.values()]}}},Pronunciation=class{constructor(entry,phonemes,note=null){this.entry=entry;this.note=note;this.phonemes=phonemes.map(phoneme=>new Phoneme(phoneme))}toString(){return`${this.entry.name} ${this.phonemes.join(" ")}`}toJSON(){let json={phonemes:this.phonemes.map(phoneme=>phoneme.toString())};return this.note&&(json.note=this.note),json}},_Phoneme=class{constructor(raw){this.raw=raw;let match=raw.match(_Phoneme.Pattern);this.phoneme=match.groups.phoneme,this.stress=match.groups.stress?parseInt(match.groups.stress):null}toString(){return this.raw}},Phoneme=_Phoneme;Phoneme.Pattern=new RegExp("^(?<phoneme>[A-Z]+)(?<stress>[0-2])?$","i");var import_fs=require("fs");var ArticulationManner=(ArticulationManner2=>(ArticulationManner2.Stop="stop",ArticulationManner2.Nasal="nasal",ArticulationManner2.Fricative="fricative",ArticulationManner2.Affricate="affricate",ArticulationManner2.Liquid="liquid",ArticulationManner2.Semivowel="semivowel",ArticulationManner2.Vowel="vowel",ArticulationManner2.Aspirate="aspirate",ArticulationManner2))(ArticulationManner||{});function mapIt(it,fn){let result=new Array;for(let value of it)result.push(fn(value));return result}function read(filename){return(0,import_fs.readFileSync)(require.resolve(`cmudict/${filename}`),{encoding:"utf8"})}function readPronunciations(filename,pattern){var _a,_b;let entries=new Map;for(let match of read(filename).matchAll(pattern)){let entry=(_a=entries.get(match.groups.name))!=null?_a:new Entry(match.groups.name);(_b=match.groups.tags)==null||_b.split(", ").forEach(tag=>entry.tags.add(tag)),entry.addPronunciation(match.groups.phonemes.split(" "),match.groups.note),entries.set(entry.name,entry)}return entries}var WordPattern=new RegExp("^(?<name>[^\\s()]+)(?:\\((?<index>\\d+)\\))? (?<phonemes>(?:[A-Z]+[0-2]?(?:(?= #)| |$))+)(?: # (?<tags>(?:[^\\s,]+(?:$|[\\s,]+))+))?$","gmi"),Dict=readPronunciations("cmudict.dict",WordPattern),PhonePattern=new RegExp("^(?<phoneme>[A-Z]+)\\s+(?<manner>[A-Z]+)$","gmi"),Phones=new Map(mapIt(read("cmudict.phones").matchAll(PhonePattern),match=>[match[1],match[2]])),SymbolPattern=/^\S+$/gm,Symbols=read("cmudict.symbols").match(SymbolPattern),VPPattern=new RegExp("^(?<name>[^A-Z\\s]+)(?<note>[^\\s()]+)?(?:\\((?<index>\\d+)\\))? (?<phonemes>(?:[A-Z]+[0-2]?(?: |$))+)","gmi"),VP=readPronunciations("cmudict.vp",VPPattern);0&&(module.exports={ArticulationManner,Dict,Entry,Phoneme,Phones,Pronunciation,Symbols,VP});
