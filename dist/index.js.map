{"version":3,"sources":["../src/index.ts","../src/entry.ts","../src/util.ts"],"sourcesContent":["import { Entry } from \"./entry\";\nimport {\n    ArticulationManner,\n    mapIt,\n    read,\n    readPronunciations\n} from \"./util\";\n\nconst WordPattern = /^(?<name>[^\\s()]+)(?:\\((?<index>\\d+)\\))? (?<phonemes>(?:[A-Z]+[0-2]?(?:(?= #)| |$))+)(?: # (?<tags>(?:[^\\s,]+(?:$|[\\s,]+))+))?$/gmi;\nexport const Dict = readPronunciations(\"cmudict.dict\", WordPattern);\n\nconst PhonePattern = /^(?<phoneme>[A-Z]+)\\s+(?<manner>[A-Z]+)$/gmi;\n/**\n * Maps phoneme to manner of articulation\n */\nexport const Phones = new Map<string, `${ArticulationManner}`>(\n    mapIt(\n        read(\"cmudict.phones\")\n            .matchAll(PhonePattern),\n        match => [match[1], <`${ArticulationManner}`>match[2]]\n    )\n);\n\nconst SymbolPattern = /^\\S+$/gm;\nexport const Symbols: Array<string> = read(\"cmudict.symbols\")\n    .match(SymbolPattern)!;\n\n// WTF does 'vp' mean?\nconst VPPattern = /^(?<name>[^A-Z\\s]+)(?<note>[^\\s()]+)?(?:\\((?<index>\\d+)\\))? (?<phonemes>(?:[A-Z]+[0-2]?(?: |$))+)/gmi;\nexport const VP = readPronunciations(\"cmudict.vp\", VPPattern);\n\nexport { ArticulationManner, Entry };\nexport { Phoneme, Pronunciation } from \"./entry\";\n","export class Entry {\n    readonly pronunciations: Array<Pronunciation>;\n    readonly tags: Set<string>;\n\n    constructor(readonly name: string, tags: Iterable<string> = []) {\n        this.pronunciations = [];\n        this.tags = new Set<string>(tags);\n    }\n\n    addPronunciation(pronunciation: Array<string>, note?: string): Pronunciation {\n        const newItem = new Pronunciation(\n            this,\n            pronunciation,\n            note\n        );\n        this.pronunciations.push(newItem);\n        return newItem;\n    }\n\n    toString(): string {\n        if (this.tags && this.pronunciations.length) {\n            const first = this.pronunciations[0].toString() + ` # ${[...this.tags.values()].join(\", \")}`;\n            return [first, ...this.pronunciations.slice(1)].join(\"\\n\");\n        }\n        else {\n            return this.pronunciations.join(\"\\n\");\n        }\n    }\n\n    toJSON() {\n        return {\n            name: this.name,\n            pronunciations: this.pronunciations.map(pronunciation => pronunciation.toJSON()),\n            tags: [...this.tags.values()]\n        };\n    }\n}\n\nexport class Pronunciation {\n    readonly phonemes: Array<Phoneme>;\n\n    constructor(\n        readonly entry: Entry,\n        phonemes: Array<string>,\n        readonly note: string | null = null\n    ) {\n        this.phonemes = phonemes.map(phoneme => new Phoneme(phoneme));\n    }\n\n    toString(): string {\n        return `${this.entry.name} ${this.phonemes.join(\" \")}`;\n    }\n\n    toJSON() {\n        const json: {\n            phonemes: Array<string>;\n            note?: string\n        } = { phonemes: this.phonemes.map(phoneme => phoneme.toString()) };\n        if (this.note) {\n            json.note = this.note;\n        }\n        return json;\n    }\n}\n\nexport class Phoneme {\n    private static readonly Pattern = /^(?<phoneme>[A-Z]+)(?<stress>[0-2])?$/i;\n    readonly phoneme: string;\n    readonly stress: number | null;\n\n    constructor(readonly raw: string) {\n        const match = raw.match(Phoneme.Pattern)!;\n        this.phoneme = match.groups!.phoneme;\n        this.stress = match.groups!.stress ? parseInt(match.groups!.stress) : null;\n    }\n\n    toString(): string {\n        return this.raw;\n    }\n}\n","import { readFileSync } from \"fs\";\nimport { Entry } from \"./entry\";\n\nexport enum ArticulationManner {\n    Stop = \"stop\",\n    Nasal = \"nasal\",\n    Fricative = \"fricative\",\n    Affricate = \"affricate\",\n    Liquid = \"liquid\",\n    Semivowel = \"semivowel\",\n    Vowel = \"vowel\",\n    Aspirate = \"aspirate\"\n}\n\nexport function mapIt<T, R>(it: Iterable<T>, fn: (v: T) => R): Array<R> {\n    const result = new Array<R>();\n    for (const value of it) {\n        result.push(fn(value));\n    }\n    return result;\n}\n\nexport function read(filename: string): string {\n    return readFileSync(require.resolve(`cmudict/${filename}`), { encoding: \"utf8\" });\n}\n\nexport function readPronunciations(filename: string, pattern: RegExp): Map<string, Entry> {\n    const entries = new Map<string, Entry>();\n    for (const match of read(filename).matchAll(pattern)) {\n        const entry = entries.get(match.groups!.name) ?? new Entry(match.groups!.name);\n        match.groups!.tags\n            ?.split(\", \")\n            .forEach(tag => entry.tags.add(tag));\n        entry.addPronunciation(match.groups!.phonemes.split(\" \"), match.groups!.note);\n        entries.set(entry.name, entry);\n    }\n    return entries;\n}\n"],"mappings":"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","names":["ArticulationManner"]}